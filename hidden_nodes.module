<?php

/**
 * @file
 * Allow users to view all hidden nodes, or hidden nodes
 * of a specific type.
 */

/**
 * Implementation of hook_perm().
 *
 * Adds a global 'view all hidden content' permission and also
 * a new permission for each content type.
 */
function hidden_nodes_perm() {
  $perms = array('view all hidden content');

  foreach (node_get_types() as $type => $name) {
    $perms[] = 'view hidden ' . $type . ' content';
  }

  return $perms;
}

/**
 * Implementation of hook_menu().
 */
function hidden_nodes_menu() {
  $items = array();
  $items['admin/settings/hidden_nodes'] = array(
    'title' => 'Hidden nodes',
    'description' => 'Settings for Hidden nodes module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hidden_nodes_setting_page'),
    'file' => 'hidden_nodes.admin.inc',
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implementation of hook_menu_alter().
 *
 * Modifies the path node/nid to use our access callback.
 */
function hidden_nodes_menu_alter(&$items) {
  $old_access_callback = $items['node/%node']['access callback'];
  $old_access_arguments = $items['node/%node']['access arguments'];
  $items['node/%node']['access callback'] = '_hidden_nodes_node_access';
  $items['node/%node']['access arguments'] = array(1, $old_access_callback, $old_access_arguments);
}

/**
 * Implementation of hook_nodeapi().
 */
function hidden_nodes_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
      // if node's ability to be hidden is valid, save it
      if (isset($node->hidden)) {
        db_query("UPDATE {hidden_nodes} SET hidden=%d WHERE nid=%d", $node->hidden, $node->nid);
        // if there was no update then insert new
        if (!db_affected_rows()) {
          @db_query("INSERT INTO {hidden_nodes} (nid, hidden) VALUES(%d, %d)", $node->nid, $node->hidden);
        }
      }
    break;
    case 'load':
      // attempt to set hidden value
      $result = db_query("SELECT hidden FROM {hidden_nodes} WHERE nid=%d", $node->nid);
      $val = db_fetch_array($result);
      // if this module was turned on after the fact, nodes won't have a value
      if (isset($val['hidden'])) {
        $node->hidden = $val['hidden'];
      }
      else {
        $node->hidden = 0;
      }
    break;
    case 'delete':
      // clean up on node delete
      db_query("DELETE FROM {hidden_nodes} WHERE nid=%d", $node->nid);
    break;
  }
}

/**
 * Returns true if the user has 'view all hidden content' or if
 * they have the permission corresponding to the node's content type.
 */
function _hidden_nodes_node_access($node, $old_access_callback, $old_access_arguments) {
  // Only check permissions on nodes that are hidden.
  if ($node->hidden == 1) {
    $has_access = FALSE;
    if (user_access('view all hidden content')) {
      $has_access = TRUE;
    }
    if (user_access('view hidden ' . $node->type . ' content')) {
      $has_access = TRUE;
    }
    // if they don't have access based on evaluations above return
    if (!$has_access) {
      return FALSE;
    }
  }
  // If none of the above conditions were satisfied, then use the original callback.
  $old_access_arguments[1] = $node; // arg 1 is node object
  return call_user_func_array($old_access_callback, $old_access_arguments);
}

/**
 * Implements hook_form_alter().
 */
function hidden_nodes_form_alter(&$form, $form_state, $form_id) {
  // inject new option to hide node onto all node forms
  if (isset($form['type']['#value']) && $form['type']['#value'] . '_node_form' == $form_id) {
    // Get a copy of the current node object.
    $node = $form['#node'];
    // add field to the form if the setting is there for it
    if (in_array($node->type, variable_get('hidden_nodes_types', array()))) {
      $form['hidden_nodes'] = array(
        '#type' => 'fieldset',
        '#title' => t('Hide content'),
        '#description' => t('Hide this content from displaying for users without the ability to see it. By having access to this option you will still be able to see the content after submission.'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#access' => user_access('view all hidden content') || user_access('view hidden ' . $node->type . ' content'),
      );
      $form['hidden_nodes']['hidden'] = array(
        '#type' => 'checkbox',
        '#title' => t('Hide this content'),
        '#default_value' => $node->hidden,
        '#access' => user_access('view all hidden content') || user_access('view hidden ' . $node->type . ' content'),
      );
      $form['#submit'][] = '_hidden_nodes_submit_handler';
    }
  }
}

/**
 * Submit handler for processing the hidden node checkbox.
 */
function _hidden_nodes_submit_handler($form, &$form_state) {
  if (isset($form_state['values']['hidden_node'])) {
    //dpm($form_state);
    $form['#node']->hidden = check_plain($form_state['values']['hidden_node']);
  }
}

/**
 * Implementation of hook_node_grants().
 *//*
function hidden_nodes_node_grants($account, $op) {
  $grants = array();
	$node = menu_get_object();
	if (isset($node->type)) {
		if (user_access('view all hidden content', $account) || user_access('view hidden ' . $node->type . ' content', $account)) {
      $grants['hidden_nodes'] = array(1);
    }
	}
	else {
		if (user_access('view all hidden content', $account)) {
      $grants['hidden_nodes'] = array(1);
    }
	}
  
  return $grants;
}*/

/**
 * Implementation of hook_node_access_records.
 */
/*function hidden_nodes_node_access_records($node) {
  $grants = array();
  // only return grants if hidden is true
  if ($node->hidden) {
    $grants[] = array (
      'realm' => 'hidden_nodes',
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
  }
  return $grants;
}*/

/**
 * Implementation of hook_node_access_explain.
 *//*
function hidden_nodes_node_access_explain($row) {
  if ($row->realm == 'hidden_nodes') {
    return t('Users with permission to see hidden nodes will.');
  }
}*/
